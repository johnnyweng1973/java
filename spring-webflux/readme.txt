Webflux project note 2:
Project webflux:
1. different from project 1:
   first project has two endpoints defined in controller class. static data is defined locally. 
   This project defines service class which will interact with repository classes.
   for http request handling, two types are defined. one is restcontroller and the other is functional interface.
   for functional interface, a handler class is defined.
   model dir has a user class file. model is shorthand of data model which represent data structure and behavior.

2. call flows
   reactive http server receive a http request (create a user)
   it find the end point for this request from RestController and call the method. input paramter object User is created by Calling factory method provided by Json library since User is annotated as a bean.
   controller calls method from Service object, service call method from repository
   reposibory return a mono object  
  
   
Visit spring initlzr website and you can get a spring project tarfile there.
2. Spring boot project  structure
            src/main/java for java source files, src/test/java for test files
            Target will be generated by build tools to store target files
            Pom.xml in the root
            Main package is in root dir such as com/example/springbootwebfluxhello, this dir should only has one file that is the classname of application.
            Other packages should be subdirs for classes of controller, service, repo, etc.
3. Springbootwebfluxhello project structure
It has three packages: 
      main package: one file with application class annotated with “@SpringBootApplication”
      controller package: one file with controller class annotated with “@RestController”.
       entity package: one file with class for user definition 
4. Controller class
Controller is entry point of handling http request. All methods are annotated with “@GetMapping("/path")”
In this example, it can handle request with synchronous way which return a string directly. And asynchronous way which return a mono<User>. It calls factory method “just”  of Mono to generate an data
       Return Mono.just(User)


5. Json library
As shown above, when you return a Mono<User> to Spring, spring will use json library jackson to serialize this object. It will output name-value pairs for all private fields of this object who has public getter method.